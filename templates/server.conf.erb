#################################################
# OpenVPN config generated by puppet            #
#################################################

# Which local IP address should OpenVPN
<% unless scope['openvpn::bind_address'].nil? %>
local <%= scope['openvpn::bind_address'] %>
<% end %>

# Which TCP/UDP port should OpenVPN listen on?
port <%= scope['openvpn::bind_port'] %>

# TCP or UDP server?
proto <%= scope['openvpn::protocol'] %>

# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
dev <%= scope['openvpn::device_type'] %>

# SSL/TLS root certificate (ca), certificate
# (cert), and private key (key).
ca ca.crt
cert server.crt
key server.key  # This file should be kept secret

<% if scope['openvpn::crl'] %>
crl-verify crl.pem
<% end %>

# Diffie hellman parameters.
dh dh.pem

# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
server <%= scope['openvpn::local_net'][0] %> <%= scope['openvpn::local_netmask'] %>

# Maintain a record of client <-> virtual IP address
# associations in this file.
ifconfig-pool-persist ipp.txt

<% unless scope['openvpn::zones'].empty? %>
<% scope['openvpn::zones'].each do |name,zone| %>
<% unless zone['route'].nil? %>
route <%= zone['route'] %>
<% end %>
<% end %>
<% end %>


<% unless scope['openvpn::push_route'].empty? %>
# Push routes to the client to allow it
# to reach other private subnets behind
# the server.
<% scope['openvpn::push_route'].each do |route| %>
push "route <%= route %>"
<% end %>
<% end %>

<% if scope['openvpn::push_default_gw'] %>
# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN.
push "redirect-gateway def1 bypass-dhcp"
<% end %>

<% unless scope['openvpn::dns_server'].empty? && scope['openvpn::dns_domain'].empty? %>
# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.
<% scope['openvpn::dns_server'].each do |dns| %>
push "dhcp-option DNS <%= dns %>"
<% end %>
<% scope['openvpn::dns_domain'].each do |domain| %>
push "dhcp-option DOMAIN <%= domain %>"
<% end %>
<% end %>

# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
keepalive 10 120

<% if scope['openvpn::comp_lzo'] %>
# Enable compression on the VPN link.
comp-lzo
<% end %>

# The maximum number of concurrently connected
# clients we want to allow.
max-clients <%= scope['openvpn::max_clients'] %>

# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
user nobody
group <%= (scope['osfamily'] == 'Debian') ? 'nogroup' : 'nobody' %>

# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
persist-key
persist-tun

# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
status openvpn-status.log

# Set the appropriate level of log
# file verbosity.
verb 0
disable-occ

client-config-dir clients

# hardening
reneg-bytes 64000000
tls-cipher <%= scope['openvpn::tls_cipher'] %>
cipher <%= scope['openvpn::cipher'] %>

<%= scope['openvpn::additional_config'] %>
